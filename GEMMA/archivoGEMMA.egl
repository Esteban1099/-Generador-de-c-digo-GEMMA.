PROGRAM GEMMA

[%

var flagEntry = true;
var nameFlagEntry = "FlagEntry";
var nameSate = "State";
var state = 0;
var tipoOm;
var esOmInicial;
for (om in Om.all) { 
	tipoOm = om.tipo.name;
	esOmInicial = om.esOmRaiz;
	if(esOmInicial){
		if(tipoOm == "A1"){
			state = 1;
		}
		else if(tipoOm == "A2"){
			state = 2;
		}
		else if(tipoOm == "A3"){
			state = 3;
		}
		else if(tipoOm == "A4"){
			state = 4;
		}
		else if(tipoOm == "A5"){
			state = 5;
		}
		else if(tipoOm == "A6"){
			state = 6;
		}
		else if(tipoOm == "A7"){
			state = 7;
		}
		else if(tipoOm == "F1"){
			state = 11;
		}
		else if(tipoOm == "F2"){
			state = 12;
		}
		else if(tipoOm == "F3"){
			state = 13;
		}
		else if(tipoOm == "F4"){
			state = 14;
		}
		else if(tipoOm == "F5"){
			state = 15;
		}
		else if(tipoOm == "F6"){
			state = 16;
		}
		else if(tipoOm == "D1"){
			state = 21;
		}
		else if(tipoOm == "D2"){
			state = 22;
		}
		else{
			sate = 23;
		}
		break;
	}
}
%]
VAR
	[%= nameSate %]:UINT:=[%= state %];
	[%= nameFlagEntry %]:BOOL:=[%= flagEntry %];

END_VAR


CASE [%= nameSate %] OF
[%
var numOm = 0;
var variables: Set; 
	for (om in Om.all) {
		tipoOm = om.tipo.name;
			if(tipoOm == "A1"){
				numOm = 1;
			}
			else if(tipoOm == "A2"){
				numOm = 2;
			}
			else if(tipoOm == "A3"){
				numOm = 3;
			}
			else if(tipoOm == "A4"){
				numOm = 4;
			}
			else if(tipoOm == "A5"){
				numOm = 5;
			}
			else if(tipoOm == "A6"){
				numOm = 6;
			}
			else if(tipoOm == "A7"){
				numOm = 7;
			}
			else if(tipoOm == "F1"){
				numOm = 11;
			}
			else if(tipoOm == "F2"){
				numOm = 12;
			}
			else if(tipoOm == "F3"){
				numOm = 13;
			}
			else if(tipoOm == "F4"){
				numOm = 14;
			}
			else if(tipoOm == "F5"){
				numOm = 15;
			}
			else if(tipoOm == "F6"){
				numOm = 16;
			}
			else if(tipoOm == "D1"){
				numOm = 21;
			}
			else if(tipoOm == "D2"){
				numOm = 22;
			}
			else{
				numOm = 23;
			}
			%]
		[%= numOm %]://[%= tipoOm %]
			//Entry behavior
			IF [%= nameFlagEntry %]	THEN
				GVL.[%= tipoOm %]_GEMMA := TRUE;
				[%= nameFlagEntry %] := FALSE;
				[%
					flagEntry = false;
				%]
			END_IF
			
			//Do behavior
			[%= tipoOm %]();
			[%		
		//validar si existen multiples transiciones.
		var elementoExpresion;
		var trMultiples = false;
		var termino = false;
		var contadorVarGemma = 0;
		var contadorVarOm = 0;
		var eleIzq;
		var eleDer;
		for (tr in Transicion.all) { 
			//Si la transicion es entre om a om
			if (tr.isTypeOf(TrasicionEntreOmOm)){
				//Validar si mi om es el origen de la transicion.
				if(tr.origen.name == om.name and om.esVisible == true){
					elementoExpresion = tr.elementoExpresion;
					//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
					while(termino == false){
						//1) ser una referencia a una variable Gemma.
						if(elementoExpresion.isTypeOf(RefVariableGemma)){
							termino = true;
							if(elementoExpresion.nivelDeEscritura.name == "om"){
								contadorVarOm = contadorVarOm + 1;
							}
							else{
								contadorVarGemma = contadorVarGemma + 1;
							}
						}
						//2) ser una referencia a una variable Om.
						else if(elementoExpresion.isTypeOf(RefVariableOm)){
							termino = true;	
						}
						//3) ser una referencia a una expresion not.
						else if(elementoExpresion.isTypeOf(ExpresionNot)){
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//3) ser una expresion conjunta.
						else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//4) ser una expresion binaria.
						else{
							eleIzq = elementoExpresion.expresionIzquierda;
							eleDer = elementoExpresion.expresionDerecha;
							//Validar el elemento de la izquierda
							
							//1) Que el elemento de la izquierda sea not.
							if(eleIzq.isTypeOf(ExpresionNot)){
								//Validar si el elemento que guarda la expresion not es una variable Om.
								if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
									termino = true;
								}
								//Validar si el elemento que guarda la expresion not es una variable Gemma.
								else{
									if(eleIzq.elementoExpresion.nivelDeEscritura.name == "om"){
										contadorVarOm = contadorVarOm + 1;
									}
									else{
										contadorVarGemma = contadorVarGemma + 1;
									}
								}
							}
							//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
							else if(eleIzq.isTypeOf(RefVariableGemma)){
								if(eleIzq.nivelDeEscritura.name == "om"){
									contadorVarOm = contadorVarOm + 1;
								}
								else{
									contadorVarGemma = contadorVarGemma + 1;
								}
							}
							//3) Que el elemento de la izquierda sea una referencia a una variable Om.
							else{
								termino = true;
							}
							
							elementoExpresion = eleDer;
						}
					}
					//Volver a termino false para la otra transicion.
					termino = false;
				}
			}
			//Si la transicion es entre macro a om
			else{
			
				if(tr.origen.oms.select(pOm|pOm.name == om.name).first() == om and om.esVisible == true){
					elementoExpresion = tr.elementoExpresion;
					//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
					while(termino == false){
						//1) ser una referencia a una variable Gemma.
						if(elementoExpresion.isTypeOf(RefVariableGemma)){
							termino = true;
							if(elementoExpresion.nivelDeEscritura.name == "om"){
								contadorVarOm = contadorVarOm + 1;
							}
							else{
								contadorVarGemma = contadorVarGemma + 1;
							}
						}
						//2) ser una referencia a una variable Om.
						else if(elementoExpresion.isTypeOf(RefVariableOm)){
							termino = true;	
						}
						//3) ser una referencia a una expresion not.
						else if(elementoExpresion.isTypeOf(ExpresionNot)){
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//3) ser una expresion conjunta.
						else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//4) ser una expresion binaria.
						else{
							eleIzq = elementoExpresion.expresionIzquierda;
							eleDer = elementoExpresion.expresionDerecha;
							//Validar el elemento de la izquierda
							
							//1) Que el elemento de la izquierda sea not.
							if(eleIzq.isTypeOf(ExpresionNot)){
								//Validar si el elemento que guarda la expresion not es una variable Om.
								if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
									termino = true;
								}
								//Validar si el elemento que guarda la expresion not es una variable Gemma.
								else{
									if(eleIzq.elementoExpresion.nivelDeEscritura.name == "om"){
										contadorVarOm = contadorVarOm + 1;
									}
									else{
										contadorVarGemma = contadorVarGemma + 1;
									}
								}
							}
							//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
							else if(eleIzq.isTypeOf(RefVariableGemma)){
								if(eleIzq.nivelDeEscritura.name == "om"){
									contadorVarOm = contadorVarOm + 1;
								}
								else{
									contadorVarGemma = contadorVarGemma + 1;
								}
							}
							//3) Que el elemento de la izquierda sea una referencia a una variable Om.
							else{
								termino = true;
							}
							
							elementoExpresion = eleDer;
						}
					}
					//Volver a termino false para la otra transicion.
					termino = false;
				}			
			}
		}
		
		if(contadorVarGemma > 0 and contadorVarOm > 0){
			trMultiples = true;
		}
		
		//Validar las transiciones negritas para asignar el valor de las transiciones a su expresion condicional.
		%]
			//Transitions	
		[%		
		var elementoExpresion;
		var termino = false;
		var expConjunta = false;
		var expresionGuardada = "";
		var eleIzq;
		var eleDer;
		for (tr in Transicion.all) { 
			//Si la transicion es entre om a om
			if (tr.isTypeOf(TrasicionEntreOmOm)){
				//Validar si mi om es el origen de la transicion.
				if(tr.origen.name == om.name and om.esVisible == true){
					elementoExpresion = tr.elementoExpresion;
					//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
					while(termino == false){
						//1) ser una referencia a una variable Gemma.
						if(elementoExpresion.isTypeOf(RefVariableGemma)){
							termino = true;
							//Validar si se escribe una transicion en el gemma.
							if(elementoExpresion.nivelDeEscritura.name == "gemma"){
								//se asigna el valor de la condición a la transición.
								
								//Validar si se viene de una expresion conjunta.
								if(expConjunta = true){
									expConjunta = false;
								%]
			GVL.[%= tr.name %] := [%= expresionGuardada %]GVL.[%= elementoExpresion.variableGemma.name %] );					
								[%						
								}
								//Condiciones normales.
								else{
								%]
			GVL.[%= tr.name %] := [%= expresionGuardada %]GVL.[%= elementoExpresion.variableGemma.name %];					
								[%						
								}
							}	
						}
						//2) ser una referencia a una variable Om.
						else if(elementoExpresion.isTypeOf(RefVariableOm)){
							termino = true;
							//No se hace nada dado que es una variable del OM.
						}
						//3) ser una referencia a una expresion not.
						else if(elementoExpresion.isTypeOf(ExpresionNot)){
							expresionGuardada = expresionGuardada + "NOT ";
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//3) ser una expresion conjunta.
						else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
							expresionGuardada = expresionGuardada + "( ";
							expConjunta = true;
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//4) ser una expresion binaria.
						else{
							eleIzq = elementoExpresion.expresionIzquierda;
							eleDer = elementoExpresion.expresionDerecha;
							//Validar el elemento de la izquierda
							
							//1) Que el elemento de la izquierda sea not.
							if(eleIzq.isTypeOf(ExpresionNot)){
								//Validar si el elemento que guarda la expresion not es una variable Om.
								if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
									termino = true;
									expresionGuardada = expresionGuardada + "NOT ";
									//No se hace nada dado que es una variable del Gemma.
								}
								//Validar si el elemento que guarda la expresion not es una variable Gemma.
								else{
									if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
										expresionGuardada = expresionGuardada + "NOT "+"GVL."+eleIzq.elementoExpresion.variableGemma.name;
									}
									else
									{
										termino = true;
									}
								}
							}
							//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
							else if(eleIzq.isTypeOf(RefVariableGemma)){
								if(eleIzq.nivelDeEscritura.name == "gemma"){
									
									expresionGuardada = expresionGuardada +"GVL."+eleIzq.variableGemma.name;
								}
								else
								{
									termino = true;
								}
							}
							//3) Que el elemento de la izquierda sea una referencia a una variable Om.
							else{
								termino = true;
								//No se hace nada dado que es una variable del Gemma.
							}
							
							//Agregar el operador.
							expresionGuardada = expresionGuardada + " " + elementoExpresion.operador.name + " ";
		
							
							elementoExpresion = eleDer;
						}
					}
					//Volver a termino false para la otra transicion.
					termino = false;
					expresionGuardada = "";
				}
			}
			//Si la transicion es entre macro a om
			else{
				if(tr.origen.oms.select(pOm|pOm.name == om.name).first() == om and om.esVisible == true){
					elementoExpresion = tr.elementoExpresion;
					//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
					while(termino == false){
						//1) ser una referencia a una variable Gemma.
						if(elementoExpresion.isTypeOf(RefVariableGemma)){
							termino = true;
							//Validar si se escribe una transicion en el gemma.
							if(elementoExpresion.nivelDeEscritura.name == "gemma"){
								//se asigna el valor de la condición a la transición.
								
								//Validar si se viene de una expresion conjunta.
								if(expConjunta = true){
									expConjunta = false;
								%]
			GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] := [%= expresionGuardada %]GVL.[%= elementoExpresion.variableGemma.name %] );					
								[%						
								}
								//Condiciones normales.
								else{
								%]
			GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] := [%= expresionGuardada %]GVL.[%= elementoExpresion.variableGemma.name %];					
								[%						
								}
							}	
						}
						//2) ser una referencia a una variable Om.
						else if(elementoExpresion.isTypeOf(RefVariableOm)){
							termino = true;
							//No se hace nada dado que es una variable del OM.
						}
						//3) ser una referencia a una expresion not.
						else if(elementoExpresion.isTypeOf(ExpresionNot)){
							expresionGuardada = expresionGuardada + "NOT ";
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//3) ser una expresion conjunta.
						else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
							expresionGuardada = expresionGuardada + "( ";
							expConjunta = true;
							elementoExpresion = elementoExpresion.elementoExpresion;
						}
						//4) ser una expresion binaria.
						else{
							eleIzq = elementoExpresion.expresionIzquierda;
							eleDer = elementoExpresion.expresionDerecha;
							//Validar el elemento de la izquierda
							
							//1) Que el elemento de la izquierda sea not.
							if(eleIzq.isTypeOf(ExpresionNot)){
								//Validar si el elemento que guarda la expresion not es una variable Om.
								if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
									termino = true;
									expresionGuardada = expresionGuardada + "NOT ";
									//No se hace nada dado que es una variable del Gemma.
								}
								//Validar si el elemento que guarda la expresion not es una variable Gemma.
								else{
									if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
										expresionGuardada = expresionGuardada + "NOT "+"GVL."+eleIzq.elementoExpresion.variableGemma.name;
									}
									else
									{
										termino = true;
									}
								}
							}
							//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
							else if(eleIzq.isTypeOf(RefVariableGemma)){
								if(eleIzq.nivelDeEscritura.name == "gemma"){
									expresionGuardada = expresionGuardada +"GVL."+eleIzq.variableGemma.name;
								}
								else
								{
									termino = true;
								}
							}
							//3) Que el elemento de la izquierda sea una referencia a una variable Om.
							else{
								termino = true;
								//No se hace nada dado que es una variable del Gemma.
							}
							
							//Agregar el operador.
							expresionGuardada = expresionGuardada + " " + elementoExpresion.operador.name + " ";
		
							
							elementoExpresion = eleDer;
						}
					}
					//Volver a termino false para la otra transicion.
					termino = false;
					expresionGuardada = "";				
				}
			}
		}
		
		//Si existen transiciones multiples
		if(trMultiples){
			%]
			//Exit common behavior
			
			IF[%
			var numTrDelOm = Transicion.all.select(tr|tr.origen.name == om.name).size();
			for (trM in Transicion.all.select(tr|tr.isTypeOf(TransicionEntreMacroOmOm))) { 
				if(trM.origen.oms.select(pOm|pOm.name == om.name).first() == om){
					numTrDelOm = numTrDelOm + 1;
				}
			}
			var numTrActualDelOm = 0;
			for (tr in Transicion.all) { 
				//Si la transicion es entre om a om
				if (tr.isTypeOf(TrasicionEntreOmOm)){
					//Validar si mi om es el origen de la transicion.
					if(tr.origen.name == om.name and om.esVisible == true){
						//Me encuentro en la ultima transicion del om.
						if(numTrActualDelOm >= (numTrDelOm-1)){
							numTrActualDelOm = numTrActualDelOm + 1;
							%] GVL.[%= tr.name %] THEN [%
						}
						//Me encuentro en una transicion del om.
						else{
							numTrActualDelOm = numTrActualDelOm + 1;
							%] GVL.[%= tr.name %] OR [%
						}
					}
				}
				//Si la transicion es entre macro a om
				else{
				
					if(tr.origen.oms.select(pOm|pOm.name == om.name).first() == om and om.esVisible == true){
						//Me encuentro en la ultima transicion del om.
						if(numTrActualDelOm >= (numTrDelOm-1)){
							numTrActualDelOm = numTrActualDelOm + 1;
							%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T"  %] THEN [%
						}
						//Me encuentro en una transicion del om.
						else{
							numTrActualDelOm = numTrActualDelOm + 1;
							%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T"  %] OR [%
						}					
					}
				}
				
			}
			%]
			
				GVL.[%= om.tipo.name %]_GEMMA := FALSE;
				[%= nameFlagEntry %] := TRUE;
			[%
				flagEntry = true;
			%]
			END_IF
			
			// Exit specific behavior
			
			IF[%
			var numTrDelOm = Transicion.all.select(tr|tr.origen.name == om.name).size();
			for (trM in Transicion.all.select(tr|tr.isTypeOf(TransicionEntreMacroOmOm))) { 
				if(trM.origen.oms.select(pOm|pOm.name == om.name).first() == om){
					numTrDelOm = numTrDelOm + 1;
				}
			}
			var numTrActualDelOm = 0;
			var esTransicionGemma = false;
			var elementoExpresion;
			var termino = false;
			var eleIzq;
			var eleDer;
			for (tr in Transicion.all) { 
				//Si la transicion es entre om a om
				if (tr.isTypeOf(TrasicionEntreOmOm)){
					//Validar si mi om es el origen de la transicion.
					if(tr.origen.name == om.name and om.esVisible == true){
						elementoExpresion = tr.elementoExpresion;
						esTransicionGemma = false;
						//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
						while(termino == false){
							//1) ser una referencia a una variable Gemma.
							if(elementoExpresion.isTypeOf(RefVariableGemma)){
								termino = true;
								if(elementoExpresion.nivelDeEscritura.name == "gemma"){
									esTransicionGemma = true;
								}
							}
							//2) ser una referencia a una variable Om.
							else if(elementoExpresion.isTypeOf(RefVariableOm)){
								termino = true;
							}
							//3) ser una referencia a una expresion not.
							else if(elementoExpresion.isTypeOf(ExpresionNot)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//3) ser una expresion conjunta.
							else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//4) ser una expresion binaria.
							else{
								eleIzq = elementoExpresion.expresionIzquierda;
								eleDer = elementoExpresion.expresionDerecha;
								//Validar el elemento de la izquierda
								
								//1) Que el elemento de la izquierda sea not.
								if(eleIzq.isTypeOf(ExpresionNot)){
									//Validar si el elemento que guarda la expresion not es una variable Om.
									if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
										termino = true;
									}
									//Validar si el elemento que guarda la expresion not es una variable Om.
									else{
										if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
											esTransicionGemma = true;
										}
										else{
											termino = true;
										}
									}
								}
								//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
								else if(eleIzq.isTypeOf(RefVariableGemma)){
									if(eleIzq.nivelDeEscritura.name == "gemma"){
										esTransicionGemma = true;
									}
									else{
										termino = true;
									}
								}
								//3) Que el elemento de la izquierda sea una referencia a una variable Om.
								else{
									termino = true;
								}
								
								elementoExpresion = eleDer;
							}
						}
						//Volver a termino false para la otra transicion.
						termino = false;
						//Es una transicion Gemma.
						if(esTransicionGemma){
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= tr.name %] THEN 
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= tr.name %] THEN 
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
			[%
							}
						}
						//Es una transicion PROPIA del Om.
						else{
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= tr.name %] THEN 
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:= TRUE;
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= tr.name %] THEN 
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   [%= tr.destino.tipo.name %].Reset:= TRUE;
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:= TRUE;
			[%
							}						
						}
					}
				}
				//Si la transicion es entre macro a om
				else{
					if(tr.origen.oms.select(pOm|pOm.name == om.name).first() == om and om.esVisible == true){
						elementoExpresion = tr.elementoExpresion;
						esTransicionGemma = false;
						//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
						while(termino == false){
							//1) ser una referencia a una variable Gemma.
							if(elementoExpresion.isTypeOf(RefVariableGemma)){
								termino = true;
								if(elementoExpresion.nivelDeEscritura.name == "gemma"){
									esTransicionGemma = true;
								}
							}
							//2) ser una referencia a una variable Om.
							else if(elementoExpresion.isTypeOf(RefVariableOm)){
								termino = true;
							}
							//3) ser una referencia a una expresion not.
							else if(elementoExpresion.isTypeOf(ExpresionNot)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//3) ser una expresion conjunta.
							else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//4) ser una expresion binaria.
							else{
								eleIzq = elementoExpresion.expresionIzquierda;
								eleDer = elementoExpresion.expresionDerecha;
								//Validar el elemento de la izquierda
								
								//1) Que el elemento de la izquierda sea not.
								if(eleIzq.isTypeOf(ExpresionNot)){
									//Validar si el elemento que guarda la expresion not es una variable Om.
									if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
										termino = true;
									}
									//Validar si el elemento que guarda la expresion not es una variable Om.
									else{
										if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
											esTransicionGemma = true;
										}
										else{
											termino = true;
										}
									}
								}
								//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
								else if(eleIzq.isTypeOf(RefVariableGemma)){
									if(eleIzq.nivelDeEscritura.name == "gemma"){
										esTransicionGemma = true;
									}
									else{
										termino = true;
									}
								}
								//3) Que el elemento de la izquierda sea una referencia a una variable Om.
								else{
									termino = true;
								}
								
								elementoExpresion = eleDer;
							}
						}
						//Volver a termino false para la otra transicion.
						termino = false;
						//Es una transicion Gemma.
						if(esTransicionGemma){
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
			[%
							}
						}
						//Es una transicion PROPIA del Om.
						else{
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:= TRUE;
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   [%= tr.destino.tipo.name %].Reset:= TRUE;
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:= TRUE;
			[%
							}						
						}					
					}
				}
				
				esTransicionGemma = false;
			}
		}
		//No existen transiciones multiples
		else{
			
			%]
			
			//Exit behavior
			IF[%
			var numTrDelOm = Transicion.all.select(tr|tr.origen.name == om.name).size();
			for (trM in Transicion.all.select(tr|tr.isTypeOf(TransicionEntreMacroOmOm))) { 
				if(trM.origen.oms.select(pOm|pOm.name == om.name).first() == om){
					numTrDelOm = numTrDelOm + 1;
				}
			}
			var numTrActualDelOm = 0;
			var esTransicionGemma = false;
			var elementoExpresion;
			var termino = false;
			var eleIzq;
			var eleDer;
			for (tr in Transicion.all) { 
				//Si la transicion es entre om a om
				if (tr.isTypeOf(TrasicionEntreOmOm)){
					//Validar si mi om es el origen de la transicion.
					if(tr.origen.name == om.name and om.esVisible == true){
						elementoExpresion = tr.elementoExpresion;
						esTransicionGemma = false;
						//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
						while(termino == false){
							//1) ser una referencia a una variable Gemma.
							if(elementoExpresion.isTypeOf(RefVariableGemma)){
								termino = true;
								if(elementoExpresion.nivelDeEscritura.name == "gemma"){
									esTransicionGemma = true;
								}
							}
							//2) ser una referencia a una variable Om.
							else if(elementoExpresion.isTypeOf(RefVariableOm)){
								termino = true;
							}
							//3) ser una referencia a una expresion not.
							else if(elementoExpresion.isTypeOf(ExpresionNot)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//3) ser una expresion conjunta.
							else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//4) ser una expresion binaria.
							else{
								eleIzq = elementoExpresion.expresionIzquierda;
								eleDer = elementoExpresion.expresionDerecha;
								//Validar el elemento de la izquierda
								
								//1) Que el elemento de la izquierda sea not.
								if(eleIzq.isTypeOf(ExpresionNot)){
									//Validar si el elemento que guarda la expresion not es una variable Om.
									if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
										termino = true;
									}
									//Validar si el elemento que guarda la expresion not es una variable Om.
									else{
										if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
											esTransicionGemma = true;
										}
										else{
											termino = true;
										}
									}
								}
								//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
								else if(eleIzq.isTypeOf(RefVariableGemma)){
									if(eleIzq.nivelDeEscritura.name == "gemma"){
										esTransicionGemma = true;
									}
									else{
										termino = true;
									}
								}
								//3) Que el elemento de la izquierda sea una referencia a una variable Om.
								else{
									termino = true;
								}
								
								elementoExpresion = eleDer;
							}
						}
						//Volver a termino false para la otra transicion.
						termino = false;
						//Es una transicion Gemma.
						if(esTransicionGemma){				
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= tr.name %] THEN 
               
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;				
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			END_IF
			[%							
							}
							//Me encuentro en la ultima transicion del om.
							else if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
              	
              			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= tr.name %] THEN
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			 
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE; 
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				
			[%
							}
						}
						//Es una transicion PROPIA del Om.
						else{
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= tr.name %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							else if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;			
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:=TRUE;
				
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= tr.name %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			
			   GVL.[%= tr.name %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   [%= tr.destino.tipo.name %].Reset:=TRUE;
			   
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= tr.name %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;			
				GVL.[%= tr.name %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:=TRUE;
				
			[%
							}						
						}
					}
				}
				//Si la transicion es entre macro a om
				else{
					if(tr.origen.oms.select(pOm|pOm.name == om.name).first() == om and om.esVisible == true){
						elementoExpresion = tr.elementoExpresion;
						esTransicionGemma = false;
						//Ahora validar los 4 posibles caminos que puede tomar un elemento expresion.
						while(termino == false){
							//1) ser una referencia a una variable Gemma.
							if(elementoExpresion.isTypeOf(RefVariableGemma)){
								termino = true;
								if(elementoExpresion.nivelDeEscritura.name == "gemma"){
									esTransicionGemma = true;
								}
							}
							//2) ser una referencia a una variable Om.
							else if(elementoExpresion.isTypeOf(RefVariableOm)){
								termino = true;
							}
							//3) ser una referencia a una expresion not.
							else if(elementoExpresion.isTypeOf(ExpresionNot)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//3) ser una expresion conjunta.
							else if(elementoExpresion.isTypeOf(ExpresionConjunta)){
								elementoExpresion = elementoExpresion.elementoExpresion;
							}
							//4) ser una expresion binaria.
							else{
								eleIzq = elementoExpresion.expresionIzquierda;
								eleDer = elementoExpresion.expresionDerecha;
								//Validar el elemento de la izquierda
								
								//1) Que el elemento de la izquierda sea not.
								if(eleIzq.isTypeOf(ExpresionNot)){
									//Validar si el elemento que guarda la expresion not es una variable Om.
									if(eleIzq.elementoExpresion.isTypeOf(RefVariableOm)){
										termino = true;
									}
									//Validar si el elemento que guarda la expresion not es una variable Om.
									else{
										if(eleIzq.elementoExpresion.nivelDeEscritura.name == "gemma"){
											esTransicionGemma = true;
										}
										else{
											termino = true;
										}
									}
								}
								//2) Que el elemento de la izquierda sea una referencia a una variable Gemma.
								else if(eleIzq.isTypeOf(RefVariableGemma)){
									if(eleIzq.nivelDeEscritura.name == "gemma"){
										esTransicionGemma = true;
									}
									else{
										termino = true;
									}
								}
								//3) Que el elemento de la izquierda sea una referencia a una variable Om.
								else{
									termino = true;
								}
								
								elementoExpresion = eleDer;
							}
						}
						//Volver a termino false para la otra transicion.
						termino = false;
						//Es una transicion Gemma.
						if(esTransicionGemma){				
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
               
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;				
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			END_IF
			[%							
							}
							//Me encuentro en la ultima transicion del om.
							else if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
              	
              			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			 
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE; 
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				
			[%
							}
						}
						//Es una transicion PROPIA del Om.
						else{
							//Solo tiene un elemento.				
							if((numTrDelOm-1) == 0){
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   
			END_IF
			[%							
							}						
							//Me encuentro en la ultima transicion del om.
							else if(numTrActualDelOm >= (numTrDelOm-1)){
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;			
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:=TRUE;
				
			END_IF
			[%
							}
							//Me encuentro en la primera transicion del om.
							else if(numTrActualDelOm == 0){
								numTrActualDelOm = numTrActualDelOm + 1;
			%] GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   [%= nameFlagEntry %] := TRUE;			
			   GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
			   [%= nameSate %]:= [%= numOm %];
			   [%= tr.destino.tipo.name %].Reset:=TRUE;
			   
			[%
							}
							//Me encuentro en una transicion del om.
							else{
								numTrActualDelOm = numTrActualDelOm + 1;
			%]
			ELSIF GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %] THEN 
			
               			GVL.[%= om.tipo.name %]_GEMMA := FALSE;
			   	[%= nameFlagEntry %] := TRUE;			
				GVL.[%= om.tipo.name+"_"+tr.destino.tipo.name+"_T" %]:= FALSE;
				[%= nameSate %]:= [%= numOm %];
				[%= tr.destino.tipo.name %].Reset:=TRUE;
				
			[%
							}						
						}					
					}
				}
	
			}			
		}
	}
%]
END_CASE